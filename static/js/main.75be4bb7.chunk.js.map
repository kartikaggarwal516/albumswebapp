{"version":3,"sources":["Redux/Actions/Actions.js","Components/Home.js","Components/AlbumPics.js","App.js","serviceWorker.js","Redux/Reducers/AlbumReducer.js","Redux/Reducers/UserReducer.js","Redux/Reducers/PicsReducer.js","Redux/Reducers/CombineReducer.js","index.js"],"names":["getAlbumData","info","type","payload","getUserData","getAlbumPics","album_url","user_url","Home","state","getAlbums","axios","get","then","response","props","data","console","log","albums","catch","error","finally","getUsers","users","clickHandler","id","title","name","history","push","pathname","this","className","map","album","i","key","user","j","userId","onClick","Component","connect","store","dispatch","bindActionCreators","pics_url","AlbumPics","albumTitle","username","getPics","albumid","pics","match","params","location","setState","pic","Card","style","width","Img","variant","src","url","Body","Title","withRouter","App","basename","exact","path","component","Boolean","window","hostname","defaultState","combineReducers","action","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.75be4bb7.chunk.js","sourcesContent":["//2.action types\r\nexport const ALBUMDATA = \"ALBUM_DATA\"\r\nexport const USERDATA = \"USER_DATA\"\r\nexport const PICSDATA = \"PICS_DATA\"\r\n\r\n//3.Action Creators\r\nexport const getAlbumData = info => {\r\n    return{\r\n        type: ALBUMDATA,\r\n        payload: info\r\n    }\r\n}\r\nexport const getUserData = info => {\r\n    return{\r\n        type: USERDATA,\r\n        payload: info\r\n    }\r\n}\r\nexport const getAlbumPics = info => {\r\n    return{\r\n        type: PICSDATA,\r\n        payload: info\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport { getAlbumData, getUserData } from \"../Redux/Actions/Actions\"\r\nimport \"../Styles/home.css\"\r\nimport axios from \"axios\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport { connect } from \"react-redux\"\r\nimport { Button } from \"react-bootstrap\"\r\n\r\nconst album_url = \"https://jsonplaceholder.typicode.com/albums/\"\r\nconst user_url = \"http://jsonplaceholder.typicode.com/users\"\r\n\r\nclass Home extends Component {\r\n    state = {\r\n\r\n    }\r\n    getAlbums = () => {\r\n        axios.get(album_url)\r\n            .then((response) => {\r\n                // handle success                                \r\n                this.props.getAlbumData(response.data)\r\n                console.log(\"albums\", this.props.albums)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    getUsers = () => {\r\n        axios.get(user_url)\r\n            .then((response) => {\r\n                // handle success                                \r\n                this.props.getUserData(response.data)\r\n                console.log(\"users\", this.props.users)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    clickHandler = (id,title,name) => {\r\n        this.props.history.push({\r\n            pathname: `/${id}`,\r\n            state: {title: title,\r\n                    name: name}\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        this.getAlbums()\r\n        this.getUsers()\r\n    }\r\n    render() {\r\n        const { albums, users } = this.props\r\n        return (\r\n            <div className=\"albums\">\r\n                <div className=\"albumbox\">\r\n                    <h2>List Of Albums</h2>\r\n                    <div className=\"albumlist\">\r\n                        {albums.map((album, i) => {\r\n                            return (\r\n                                <div key={i} className=\"albuminfo\">\r\n                                    <h3>ALBUM TITLE: {album.title}</h3>\r\n                                    <div >\r\n                                        {users.map((user,j) => {\r\n                                            return (\r\n                                                <div key={j}>\r\n                                                    {album.userId == user.id\r\n                                                        && <div className=\"moreinfo\">\r\n                                                            <h5>User:{user.name}</h5>\r\n                                                            <div className=\"morebtn\" onClick={() => this.clickHandler(album.id,album.title,user.name)}>VIEW MORE</div>\r\n                                                        </div>\r\n                                                    }\r\n                                                </div>\r\n                                            )\r\n                                        })}                                        \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => {\r\n    return {\r\n        albums: store.albums,\r\n        users: store.users\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        { getAlbumData, getUserData }, dispatch\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React, { Component } from \"react\"\r\nimport axios from \"axios\"\r\nimport { getAlbumPics } from \"../Redux/Actions/Actions\"\r\nimport { withRouter } from \"react-router-dom\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport { connect } from \"react-redux\"\r\nimport { Card } from \"react-bootstrap\"\r\n\r\nconst pics_url = \"https://jsonplaceholder.typicode.com/albums\"\r\n\r\nclass AlbumPics extends Component {\r\n    state = {\r\n        albumTitle: \"\",\r\n        username: \"\"\r\n    }\r\n    getPics = (albumid) => {\r\n        axios.get(`${pics_url}/${albumid}/photos`)\r\n            .then((response) => {\r\n                // handle success                \r\n                this.props.getAlbumPics(response.data)\r\n                console.log(\"pics\", this.props.pics)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function () {\r\n                // always executed\r\n            });\r\n    }\r\n    componentDidMount() {\r\n        let albumid = this.props.match.params.albumid\r\n        let { title, name } = this.props.location.state\r\n        this.getPics(albumid)\r\n        this.setState({\r\n            albumTitle: title,\r\n            username: name\r\n        })\r\n    }\r\n    render() {\r\n        const { pics } = this.props\r\n        const { albumTitle, username } = this.state\r\n        return (\r\n            <div className=\"picspage\">\r\n                <div className=\"picsbox\">\r\n                    <h2>{albumTitle}</h2>\r\n                    <h4>{username}</h4>\r\n                    <div className=\"picslist\">\r\n                        {pics.map((pic, i) => {\r\n                            return (\r\n                                <Card className=\"piccard\" key={i} style={{ width: '18rem' }}>\r\n                                    <Card.Img variant=\"top\" src={pic.url} />\r\n                                    <Card.Body>\r\n                                        <Card.Title>{pic.title}</Card.Title>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = store => {\r\n    return {\r\n        pics: store.pics\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        { getAlbumPics }, dispatch\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AlbumPics))","import React from 'react';\nimport './App.css';\nimport Home from \"./Components/Home\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport AlbumPics from './Components/AlbumPics';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Router basename=\"albumswebapp\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:albumid\" component={AlbumPics} />        \n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ALBUMDATA} from \"../Actions/Actions\"\r\n\r\nconst defaultState = []\r\nexport default function AlbumReducer(state = defaultState, action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case ALBUMDATA : {\r\n            state = action.payload\r\n            return state\r\n        }\r\n        default: return state\r\n    }\r\n}","import {USERDATA} from \"../Actions/Actions\"\r\n\r\nconst defaultState = []\r\nexport default function UserReducer(state = defaultState, action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case USERDATA : {\r\n            state = action.payload\r\n            return state\r\n        }\r\n        default: return state\r\n    }\r\n}","import {PICSDATA} from \"../Actions/Actions\"\r\n\r\nconst defaultState = []\r\nexport default function PicsReducer(state = defaultState, action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case PICSDATA : {\r\n            state = action.payload\r\n            return state\r\n        }\r\n        default: return state\r\n    }\r\n}","import albums from \"./AlbumReducer\"\r\nimport users from \"./UserReducer\"\r\nimport pics from \"./PicsReducer\"\r\nimport { combineReducers } from 'redux'\r\n\r\nexport default combineReducers({\r\n    albums: albums,\r\n    users: users,\r\n    pics: pics  \r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport {Provider} from \"react-redux\";\nimport reducer from \"./Redux/Reducers/CombineReducer\"\n\nconst store = createStore(reducer)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}